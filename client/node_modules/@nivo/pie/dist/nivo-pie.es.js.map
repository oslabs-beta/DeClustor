{"version":3,"file":"nivo-pie.es.js","sources":["../src/PieLegends.tsx","../src/props.ts","../src/PieTooltip.tsx","../src/hooks.ts","../src/Arcs.tsx","../src/Pie.tsx","../src/ResponsivePie.tsx","../src/PieCanvas.tsx","../src/ResponsivePieCanvas.tsx"],"sourcesContent":["import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, DatumId, LegendDatum } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: LegendDatum<RawDatum>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nexport const PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i: number) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n","import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcs', 'arcLinkLabels', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport {\n    MayHaveLabel,\n    CompletePieSvgProps,\n    ComputedDatum,\n    DatumId,\n    PieArc,\n    PieCustomLayerProps,\n    LegendDatum,\n    CommonPieProps,\n} from './types'\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: readonly RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n    forwardLegendData,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n    forwardLegendData?: CommonPieProps<RawDatum>['forwardLegendData']\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: LegendDatum<RawDatum>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    const result = useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData: LegendDatum<RawDatum>[] = data.map(item => ({\n            id: item.id,\n            label: item.label,\n            color: item.color,\n            hidden: hiddenIds.includes(item.id),\n            data: item,\n        }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n\n    // Forward the legends data if `forwardLegendData` is defined.\n    const legendData = result.legendData\n    const forwardLegendDataRef = useRef(forwardLegendData)\n    useEffect(() => {\n        if (typeof forwardLegendDataRef.current !== 'function') return\n        forwardLegendDataRef.current(legendData)\n    }, [forwardLegendDataRef, legendData])\n\n    return result\n}\n\n/**\n * Encapsulate the logic for defining/reading the active arc ID,\n * which can be either controlled (handled externally), or uncontrolled\n * (handled internally), we can optionally define a default value when\n * it's uncontrolled.\n */\nconst useActiveId = ({\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId = null,\n}: {\n    activeId?: DatumId | null\n    onActiveIdChange?: (id: DatumId | null) => void\n    defaultActiveId?: DatumId | null\n}) => {\n    const isControlled = typeof activeIdFromProps != 'undefined'\n\n    const [internalActiveId, setInternalActiveId] = useState<DatumId | null>(\n        !isControlled ? defaultActiveId : null\n    )\n\n    const activeId = isControlled ? activeIdFromProps : internalActiveId\n\n    const setActiveId = useCallback(\n        (id: DatumId | null) => {\n            if (onActiveIdChange) {\n                onActiveIdChange(id)\n            }\n\n            if (!isControlled) {\n                setInternalActiveId(id)\n            }\n        },\n        [isControlled, onActiveIdChange, setInternalActiveId]\n    )\n\n    return { activeId, setActiveId }\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    forwardLegendData,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n    | 'activeId'\n    | 'onActiveIdChange'\n    | 'defaultActiveId'\n    | 'forwardLegendData'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const { activeId, setActiveId } = useActiveId({\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n    })\n\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n        forwardLegendData,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    forwardLegendData,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> &\n    Pick<\n        Partial<CompletePieSvgProps<RawDatum>>,\n        'activeId' | 'onActiveIdChange' | 'defaultActiveId' | 'forwardLegendData'\n    > & {\n        data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    }) => {\n    const { activeId, setActiveId } = useActiveId({\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n    })\n\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n        forwardLegendData,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        activeId,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter, tooltip])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove, tooltip])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { PieLegends } from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    forwardLegendData,\n\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n        forwardLegendData,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcs: null,\n        arcLinkLabels: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum extends MayHaveLabel>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps, MayHaveLabel } from './types'\n\nexport const ResponsivePie = <RawDatum extends MayHaveLabel>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = defaultProps.pixelRatio,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n\n    legends = defaultProps.legends,\n    forwardLegendData,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n            activeId: activeIdFromProps,\n            onActiveIdChange,\n            defaultActiveId,\n            forwardLegendData,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        borderWidth,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum extends MayHaveLabel>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps, MayHaveLabel } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum extends MayHaveLabel>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["PieLegends","_ref","width","height","legends","data","toggleSerie","_jsx","_Fragment","children","map","legend","i","_legend$data","BoxLegendSvg","_extends","containerWidth","containerHeight","undefined","defaultProps","id","value","sortByValue","innerRadius","padAngle","cornerRadius","layers","startAngle","endAngle","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","borderWidth","borderColor","from","modifiers","enableArcLabels","arcLabel","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","theme","enableArcLinkLabels","arcLinkLabel","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","colors","scheme","defs","fill","isInteractive","animate","motionConfig","transitionMode","tooltip","datum","BasicTooltip","formattedValue","enableChip","color","role","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","useNormalizedData","_ref$id","_ref$value","valueFormat","_ref$colors","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","useMemo","_datum$label","datumId","datumValue","normalizedDatum","label","hidden","usePieArcs","_ref2","outerRadius","activeId","hiddenIds","forwardLegendData","pie","innerPie","d3Pie","d","degreesToRadians","sortValues","result","hiddenData","filter","item","includes","dataWithArc","arc","angle","Math","abs","index","thickness","angleDeg","radiansToDegrees","legendData","forwardLegendDataRef","useRef","useEffect","current","useActiveId","_ref3","activeIdFromProps","onActiveIdChange","_ref3$defaultActiveId","defaultActiveId","isControlled","_useState","useState","internalActiveId","setInternalActiveId","setActiveId","useCallback","usePie","_ref4","radius","_ref4$startAngle","_ref4$endAngle","_ref4$padAngle","_ref4$sortByValue","_ref4$cornerRadius","_ref4$activeInnerRadi","_ref4$activeOuterRadi","_useActiveId","_useState2","setHiddenIds","pieArcs","state","indexOf","concat","arcGenerator","useArcGenerator","usePieFromBox","_ref5","_ref5$innerRadius","innerRadiusRatio","_ref5$startAngle","_ref5$endAngle","_ref5$padAngle","_ref5$sortByValue","_ref5$cornerRadius","_ref5$fit","_ref5$activeInnerRadi","_ref5$activeOuterRadi","_useActiveId2","_useState3","computedProps","boundingBox","min","centerX","centerY","_computeArcBoundingBo","computeArcBoundingBox","points","box","_objectWithoutPropertiesLoose","_excluded","ratio","adjustedBox","x","y","debug","usePieLayerContext","_ref6","Arcs","center","onClick","onMouseEnter","onMouseMove","onMouseLeave","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","InnerPie","_ref$sortByValue","_ref$layers","_ref$startAngle","_ref$endAngle","_ref$padAngle","_ref$fit","_ref$innerRadius","_ref$cornerRadius","_ref$activeInnerRadiu","_ref$activeOuterRadiu","partialMargin","margin","_ref$borderWidth","_ref$borderColor","_ref$enableArcLabels","_ref$arcLabel","_ref$arcLabelsSkipAng","_ref$arcLabelsTextCol","_ref$arcLabelsRadiusO","arcLabelsComponent","_ref$enableArcLinkLab","_ref$arcLinkLabel","_ref$arcLinkLabelsSki","_ref$arcLinkLabelsOff","_ref$arcLinkLabelsDia","_ref$arcLinkLabelsStr","_ref$arcLinkLabelsThi","_ref$arcLinkLabelsTex","_ref$arcLinkLabelsTex2","_ref$arcLinkLabelsCol","arcLinkLabelComponent","_ref$defs","_ref$fill","_ref$isInteractive","_ref$tooltip","_ref$transitionMode","_ref$legends","_ref$role","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","normalizedData","_usePieFromBox","boundDefs","bindDefs","layerById","arcs","arcLinkLabels","arcLabels","ArcLinkLabelsLayer","skipAngle","offset","diagonalLength","straightLength","strokeWidth","textOffset","textColor","linkColor","component","ArcLabelsLayer","radiusOffset","length","layerContext","SvgWrapper","layer","Fragment","Pie","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","ResponsivePie","props","ResponsiveWrapper","InnerPieCanvas","_ref$pixelRatio","canvasEl","useTheme","getBorderColor","useInheritedColor","useArcLabels","useArcLinkLabels","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","left","top","context","forEach","beginPath","strokeStyle","lineWidth","stroke","drawCanvasArcLinkLabels","drawCanvasArcLabels","restore","renderLegendToCanvas","getArcFromMouse","_getRelativeCursor","getRelativeCursor","hoveredArc","findArcUnderCursor","find","handleMouseHover","ref","style","cursor","PieCanvas","ResponsivePieCanvas"],"mappings":"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"}