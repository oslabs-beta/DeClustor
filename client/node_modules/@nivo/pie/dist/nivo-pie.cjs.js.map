{"version":3,"file":"nivo-pie.cjs.js","sources":["../src/PieLegends.tsx","../src/props.ts","../src/PieTooltip.tsx","../src/hooks.ts","../src/Arcs.tsx","../src/Pie.tsx","../src/PieCanvas.tsx","../src/ResponsivePie.tsx","../src/ResponsivePieCanvas.tsx"],"sourcesContent":["import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, DatumId, LegendDatum } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: LegendDatum<RawDatum>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nexport const PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i: number) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n","import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcs', 'arcLinkLabels', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport {\n    MayHaveLabel,\n    CompletePieSvgProps,\n    ComputedDatum,\n    DatumId,\n    PieArc,\n    PieCustomLayerProps,\n    LegendDatum,\n    CommonPieProps,\n} from './types'\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: readonly RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n    forwardLegendData,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n    forwardLegendData?: CommonPieProps<RawDatum>['forwardLegendData']\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: LegendDatum<RawDatum>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    const result = useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData: LegendDatum<RawDatum>[] = data.map(item => ({\n            id: item.id,\n            label: item.label,\n            color: item.color,\n            hidden: hiddenIds.includes(item.id),\n            data: item,\n        }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n\n    // Forward the legends data if `forwardLegendData` is defined.\n    const legendData = result.legendData\n    const forwardLegendDataRef = useRef(forwardLegendData)\n    useEffect(() => {\n        if (typeof forwardLegendDataRef.current !== 'function') return\n        forwardLegendDataRef.current(legendData)\n    }, [forwardLegendDataRef, legendData])\n\n    return result\n}\n\n/**\n * Encapsulate the logic for defining/reading the active arc ID,\n * which can be either controlled (handled externally), or uncontrolled\n * (handled internally), we can optionally define a default value when\n * it's uncontrolled.\n */\nconst useActiveId = ({\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId = null,\n}: {\n    activeId?: DatumId | null\n    onActiveIdChange?: (id: DatumId | null) => void\n    defaultActiveId?: DatumId | null\n}) => {\n    const isControlled = typeof activeIdFromProps != 'undefined'\n\n    const [internalActiveId, setInternalActiveId] = useState<DatumId | null>(\n        !isControlled ? defaultActiveId : null\n    )\n\n    const activeId = isControlled ? activeIdFromProps : internalActiveId\n\n    const setActiveId = useCallback(\n        (id: DatumId | null) => {\n            if (onActiveIdChange) {\n                onActiveIdChange(id)\n            }\n\n            if (!isControlled) {\n                setInternalActiveId(id)\n            }\n        },\n        [isControlled, onActiveIdChange, setInternalActiveId]\n    )\n\n    return { activeId, setActiveId }\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    forwardLegendData,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n    | 'activeId'\n    | 'onActiveIdChange'\n    | 'defaultActiveId'\n    | 'forwardLegendData'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const { activeId, setActiveId } = useActiveId({\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n    })\n\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n        forwardLegendData,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    forwardLegendData,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> &\n    Pick<\n        Partial<CompletePieSvgProps<RawDatum>>,\n        'activeId' | 'onActiveIdChange' | 'defaultActiveId' | 'forwardLegendData'\n    > & {\n        data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    }) => {\n    const { activeId, setActiveId } = useActiveId({\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n    })\n\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n        forwardLegendData,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        activeId,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter, tooltip])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove, tooltip])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { PieLegends } from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    forwardLegendData,\n\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n        forwardLegendData,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcs: null,\n        arcLinkLabels: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum extends MayHaveLabel>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = defaultProps.pixelRatio,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n\n    legends = defaultProps.legends,\n    forwardLegendData,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n            activeId: activeIdFromProps,\n            onActiveIdChange,\n            defaultActiveId,\n            forwardLegendData,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        borderWidth,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum extends MayHaveLabel>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps, MayHaveLabel } from './types'\n\nexport const ResponsivePie = <RawDatum extends MayHaveLabel>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps, MayHaveLabel } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum extends MayHaveLabel>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["PieLegends","_ref","width","height","legends","data","toggleSerie","_jsx","_Fragment","children","map","legend","i","_legend$data","jsx","BoxLegendSvg","_extends","containerWidth","containerHeight","undefined","defaultProps","id","value","sortByValue","innerRadius","padAngle","cornerRadius","layers","startAngle","endAngle","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","borderWidth","borderColor","from","modifiers","enableArcLabels","arcLabel","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","theme","enableArcLinkLabels","arcLinkLabel","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","colors","scheme","defs","fill","isInteractive","animate","motionConfig","transitionMode","tooltip","datum","BasicTooltip","formattedValue","enableChip","color","role","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","useNormalizedData","_ref$id","_ref$value","valueFormat","_ref$colors","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","useMemo","_datum$label","datumId","datumValue","normalizedDatum","label","hidden","usePieArcs","_ref2","outerRadius","activeId","hiddenIds","forwardLegendData","pie","innerPie","d3Pie","d","degreesToRadians","sortValues","result","hiddenData","filter","item","includes","dataWithArc","arc","angle","Math","abs","index","thickness","angleDeg","radiansToDegrees","legendData","forwardLegendDataRef","useRef","useEffect","current","useActiveId","_ref3","activeIdFromProps","onActiveIdChange","_ref3$defaultActiveId","defaultActiveId","isControlled","_useState","useState","internalActiveId","setInternalActiveId","setActiveId","useCallback","usePieFromBox","_ref5","_ref5$innerRadius","innerRadiusRatio","_ref5$startAngle","_ref5$endAngle","_ref5$padAngle","_ref5$sortByValue","_ref5$cornerRadius","_ref5$fit","_ref5$activeInnerRadi","_ref5$activeOuterRadi","_useActiveId2","_useState3","setHiddenIds","computedProps","boundingBox","radius","min","centerX","centerY","_computeArcBoundingBo","computeArcBoundingBox","points","box","_objectWithoutPropertiesLoose","_excluded","ratio","adjustedBox","x","y","debug","pieArcs","state","indexOf","concat","arcGenerator","useArcGenerator","usePieLayerContext","_ref6","Arcs","center","onClick","onMouseEnter","onMouseMove","onMouseLeave","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","InnerPie","_ref$sortByValue","_ref$layers","_ref$startAngle","_ref$endAngle","_ref$padAngle","_ref$fit","_ref$innerRadius","_ref$cornerRadius","_ref$activeInnerRadiu","_ref$activeOuterRadiu","partialMargin","margin","_ref$borderWidth","_ref$borderColor","_ref$enableArcLabels","_ref$arcLabel","_ref$arcLabelsSkipAng","_ref$arcLabelsTextCol","_ref$arcLabelsRadiusO","arcLabelsComponent","_ref$enableArcLinkLab","_ref$arcLinkLabel","_ref$arcLinkLabelsSki","_ref$arcLinkLabelsOff","_ref$arcLinkLabelsDia","_ref$arcLinkLabelsStr","_ref$arcLinkLabelsThi","_ref$arcLinkLabelsTex","_ref$arcLinkLabelsTex2","_ref$arcLinkLabelsCol","arcLinkLabelComponent","_ref$defs","_ref$fill","_ref$isInteractive","_ref$tooltip","_ref$transitionMode","_ref$legends","_ref$role","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","normalizedData","_usePieFromBox","boundDefs","bindDefs","layerById","arcs","arcLinkLabels","arcLabels","ArcLinkLabelsLayer","skipAngle","offset","diagonalLength","straightLength","strokeWidth","textOffset","textColor","linkColor","component","ArcLabelsLayer","radiusOffset","length","layerContext","SvgWrapper","layer","Fragment","Pie","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","InnerPieCanvas","_ref$pixelRatio","canvasEl","useTheme","getBorderColor","useInheritedColor","useArcLabels","useArcLinkLabels","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","left","top","context","forEach","beginPath","strokeStyle","lineWidth","stroke","drawCanvasArcLinkLabels","drawCanvasArcLabels","restore","renderLegendToCanvas","getArcFromMouse","_getRelativeCursor","getRelativeCursor","hoveredArc","findArcUnderCursor","find","handleMouseHover","ref","style","cursor","PieCanvas","props","ResponsiveWrapper","_ref4","_ref4$startAngle","_ref4$endAngle","_ref4$padAngle","_ref4$sortByValue","_ref4$cornerRadius","_ref4$activeInnerRadi","_ref4$activeOuterRadi","_useActiveId","_useState2"],"mappings":"mkBAWO,MAAMA,EAAa,SAAHC,GAMU,IAL7BC,EAAKD,EAALC,MACAC,EAAMF,EAANE,OACAC,EAAOH,EAAPG,QACAC,EAAIJ,EAAJI,KACAC,EAAWL,EAAXK,YAEA,OACIC,EAAAA,IAAAC,EAAAA,SAAA,CAAAC,SACKL,EAAQM,KAAI,SAACC,EAAQC,GAAS,IAAAC,EAAA,OAC3BN,EAAAO,IAACC,EAAYA,aAAAC,KAELL,EAAM,CACVM,eAAgBf,EAChBgB,gBAAiBf,EACjBE,KAAiB,OAAbQ,EAAEF,EAAON,MAAIQ,EAAIR,EACrBC,YAAaK,EAAOL,YAAcA,OAAca,IAL3CP,OAUzB,EC5BaQ,EAAe,CACxBC,GAAI,KACJC,MAAO,QACPC,aAAa,EACbC,YAAa,EACbC,SAAU,EACVC,aAAc,EAEdC,OAAQ,CAAC,OAAQ,gBAAiB,YAAa,WAG/CC,WAAY,EACZC,SAAU,IACVC,KAAK,EACLC,wBAAyB,EACzBC,wBAAyB,EAGzBC,YAAa,EACbC,YAAa,CACTC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,KAI3BC,iBAAiB,EACjBC,SAAU,iBACVC,mBAAoB,EACpBC,sBAAuB,GACvBC,mBAAoB,CAAEC,MAAO,oBAG7BC,qBAAqB,EACrBC,aAAc,KACdC,uBAAwB,EACxBC,oBAAqB,EACrBC,4BAA6B,GAC7BC,4BAA6B,GAC7BC,uBAAwB,EACxBC,wBAAyB,EACzBC,uBAAwB,CAAET,MAAO,oBACjCU,mBAAoB,CAAEV,MAAO,0BAE7BW,OAAQ,CAAEC,OAAQ,QAClBC,KAAM,GACNC,KAAM,GAENC,eAAe,EAEfC,SAAS,EACTC,aAAc,SACdC,eAAgB,cAEhBC,QCtDsB,SAAH5D,GAAA,IAAiB6D,EAAK7D,EAAL6D,MAAK,OACzCvD,EAAAA,IAACwD,EAAAA,aAAY,CACT1C,GAAIyC,EAAMzC,GACVC,MAAOwC,EAAME,eACbC,YAAY,EACZC,MAAOJ,EAAMI,OACf,EDkDF9D,QAAS,GAET+D,KAAM,MAENC,WAA8B,oBAAXC,QAAgD,OAA1BC,EAAGD,OAAOE,kBAAgBD,EAAQ,gBErClEE,EAAoB,SAAHvE,GAUyB,IATnDI,EAAIJ,EAAJI,KAAIoE,EAAAxE,EACJoB,GAAAA,OAAE,IAAAoD,EAAGrD,EAAaC,GAAEoD,EAAAC,EAAAzE,EACpBqB,MAAAA,OAAK,IAAAoD,EAAGtD,EAAaE,MAAKoD,EAC1BC,EAAW1E,EAAX0E,YAAWC,EAAA3E,EACXoD,OAAAA,OAAM,IAAAuB,EAAGxD,EAAaiC,OAAMuB,EAMtBC,EAAQC,sBAAuCzD,GAC/C0D,EAAWD,sBAAsCxD,GACjD0D,EAAcC,oBAA0BN,GAExCO,EAAWC,EAAAA,qBACb9B,EACA,MAGJ,OAAO+B,EAAOA,SACV,WAAA,OACI/E,EAAKK,KAAI,SAAAoD,GAAS,IAAAuB,EACRC,EAAUT,EAAMf,GAChByB,EAAaR,EAASjB,GAEtB0B,EAA2E,CAC7EnE,GAAIiE,EACJG,MAAkB,OAAbJ,EAAEvB,EAAM2B,OAAKJ,EAAIC,EACtBI,QAAQ,EACRpE,MAAOiE,EACPvB,eAAgBgB,EAAYO,GAC5BlF,KAAMyD,GAGV,OAAA9C,KACOwE,EAAe,CAClBtB,MAAOgB,EAASM,IAExB,MACJ,CAACnF,EAAMwE,EAAOE,EAAUC,EAAaE,GAE7C,EAKaS,EAAa,SAAHC,GAiClB,IAhCDvF,EAAIuF,EAAJvF,KACAuB,EAAUgE,EAAVhE,WACAC,EAAQ+D,EAAR/D,SACAL,EAAWoE,EAAXpE,YACAqE,EAAWD,EAAXC,YACApE,EAAQmE,EAARnE,SACAF,EAAWqE,EAAXrE,YACAuE,EAAQF,EAARE,SACA/D,EAAuB6D,EAAvB7D,wBACAC,EAAuB4D,EAAvB5D,wBACA+D,EAASH,EAATG,UACAC,EAAiBJ,EAAjBI,kBAsBMC,EAAMb,EAAAA,SAAQ,WAChB,IAAMc,EAAWC,EAAKF,MACjB3E,OAAM,SAAA8E,GAAC,OAAIA,EAAE9E,KAAM,IACnBM,WAAWyE,EAAAA,iBAAiBzE,IAC5BC,SAASwE,mBAAiBxE,IAC1BJ,SAAS4E,EAAAA,iBAAiB5E,IAM/B,OAJKF,GACD2E,EAASI,WAAW,MAGjBJ,CACV,GAAE,CAACtE,EAAYC,EAAUJ,EAAUF,IAE9BgF,EAASnB,EAAAA,SAAQ,WACnB,IAAMoB,EAAanG,EAAKoG,QAAO,SAAAC,GAAI,OAAKX,EAAUY,SAASD,EAAKrF,OA0ChE,MAAO,CAAEuF,YAzCWX,EAAIO,GAAY9F,KAChC,SACImG,GAOA,IAAMC,EAAQC,KAAKC,IAAIH,EAAIhF,SAAWgF,EAAIjF,YAE1C,OAAAZ,EAAA,CAAA,EACO6F,EAAIxG,KAAI,CACXwG,IAAK,CACDI,MAAOJ,EAAII,MACXrF,WAAYiF,EAAIjF,WAChBC,SAAUgF,EAAIhF,SACdL,YACIsE,IAAae,EAAIxG,KAAKgB,GAChBG,EAAcO,EACdP,EACVqE,YACIC,IAAae,EAAIxG,KAAKgB,GAChBwE,EAAc7D,EACd6D,EACVqB,UAAWrB,EAAcrE,EACzBC,SAAUoF,EAAIpF,SACdqF,MAAAA,EACAK,SAAUC,EAAgBA,iBAACN,KAGvC,IAUkBO,WARsBhH,EAAKK,KAAI,SAAAgG,GAAI,MAAK,CAC1DrF,GAAIqF,EAAKrF,GACToE,MAAOiB,EAAKjB,MACZvB,MAAOwC,EAAKxC,MACZwB,OAAQK,EAAUY,SAASD,EAAKrF,IAChChB,KAAMqG,EACT,IAGL,GAAG,CACCT,EACA5F,EACA0F,EACAD,EACAtE,EACAO,EACA8D,EACA7D,IAIEqF,EAAad,EAAOc,WACpBC,EAAuBC,SAAOvB,GAMpC,OALAwB,EAAAA,WAAU,WACsC,mBAAjCF,EAAqBG,SAChCH,EAAqBG,QAAQJ,EACjC,GAAG,CAACC,EAAsBD,IAEnBd,CACX,EAQMmB,EAAc,SAAHC,GAQX,IAPQC,EAAiBD,EAA3B7B,SACA+B,EAAgBF,EAAhBE,iBAAgBC,EAAAH,EAChBI,gBAAAA,OAAkB,IAAHD,EAAG,KAAIA,EAMhBE,OAA2C,IAArBJ,EAE5BK,EAAgDC,EAAQA,SACnDF,EAAiC,KAAlBD,GADbI,EAAgBF,EAAA,GAAEG,EAAmBH,EAAA,GAmB5C,MAAO,CAAEnC,SAfQkC,EAAeJ,EAAoBO,EAejCE,YAbCC,eAChB,SAACjH,GACOwG,GACAA,EAAiBxG,GAGhB2G,GACDI,EAAoB/G,EAE3B,GACD,CAAC2G,EAAcH,EAAkBO,IAIzC,EAgFaG,EAAgB,SAAHC,GAoChB,IAnCNnI,EAAImI,EAAJnI,KACAH,EAAKsI,EAALtI,MACAC,EAAMqI,EAANrI,OAAMsI,EAAAD,EACNhH,YAAakH,OAAgB,IAAAD,EAAGrH,EAAaI,YAAWiH,EAAAE,EAAAH,EACxD5G,WAAAA,OAAU,IAAA+G,EAAGvH,EAAaQ,WAAU+G,EAAAC,EAAAJ,EACpC3G,SAAAA,OAAQ,IAAA+G,EAAGxH,EAAaS,SAAQ+G,EAAAC,EAAAL,EAChC/G,SAAAA,OAAQ,IAAAoH,EAAGzH,EAAaK,SAAQoH,EAAAC,EAAAN,EAChCjH,YAAAA,OAAW,IAAAuH,EAAG1H,EAAaG,YAAWuH,EAAAC,EAAAP,EACtC9G,aAAAA,OAAY,IAAAqH,EAAG3H,EAAaM,aAAYqH,EAAAC,EAAAR,EACxC1G,IAAAA,OAAG,IAAAkH,EAAG5H,EAAaU,IAAGkH,EAAAC,EAAAT,EACtBzG,wBAAAA,OAAuB,IAAAkH,EAAG7H,EAAaW,wBAAuBkH,EAAAC,EAAAV,EAC9DxG,wBAAAA,OAAuB,IAAAkH,EAAG9H,EAAaY,wBAAuBkH,EACpDtB,EAAiBY,EAA3B1C,SACA+B,EAAgBW,EAAhBX,iBACAE,EAAeS,EAAfT,gBACA/B,EAAiBwC,EAAjBxC,kBAqBAmD,EAAkCzB,EAAY,CAC1C5B,SAAU8B,EACVC,iBAAAA,EACAE,gBAAAA,IAHIjC,EAAQqD,EAARrD,SAAUuC,EAAWc,EAAXd,YAMlBe,EAAkClB,EAAQA,SAAY,IAA/CnC,EAASqD,EAAA,GAAEC,EAAYD,EAAA,GACxBE,EAAgBlE,EAAAA,SAAQ,WAC1B,IAMImE,EANAC,EAASzC,KAAK0C,IAAIvJ,EAAOC,GAAU,EACnCqB,EAAcgI,EAASzC,KAAK0C,IAAIf,EAAkB,GAElDgB,EAAUxJ,EAAQ,EAClByJ,EAAUxJ,EAAS,EAGvB,GAAI2B,EAAK,CACL,IAAA8H,EAA2BC,wBACvBH,EACAC,EACAH,EACA5H,EAAa,GACbC,EAAW,IALPiI,EAAMF,EAANE,OAAWC,EAAGC,EAAAJ,EAAAK,GAOhBC,EAAQnD,KAAK0C,IAAIvJ,EAAQ6J,EAAI7J,MAAOC,EAAS4J,EAAI5J,QAEjDgK,EAKF,CACAjK,MAAO6J,EAAI7J,MAAQgK,EACnB/J,OAAQ4J,EAAI5J,OAAS+J,GAEzBC,EAAYC,GAAKlK,EAAQiK,EAAYjK,OAAS,EAC9CiK,EAAYE,GAAKlK,EAASgK,EAAYhK,QAAU,EAEhDuJ,GAAYA,EAAUK,EAAIK,GAAKL,EAAI7J,MAAS6J,EAAI7J,MAAQgK,EAAQC,EAAYC,EAC5ET,GAAYA,EAAUI,EAAIM,GAAKN,EAAI5J,OAAU4J,EAAI5J,OAAS+J,EAAQC,EAAYE,EAE9Ed,EAAc,CAAEQ,IAAAA,EAAKG,MAAAA,EAAOJ,OAAAA,GAE5BN,GAAkBU,EAClB1I,GAA4B0I,CAChC,CAEA,MAAO,CACHR,QAAAA,EACAC,QAAAA,EACAH,OAAAA,EACAhI,YAAAA,EACA8I,MAAOf,EAEf,GAAG,CAACrJ,EAAOC,EAAQuI,EAAkB9G,EAAYC,EAAUC,IAErDyI,EAAU5E,EAAW,CACvBtF,KAAAA,EACAuB,WAAAA,EACAC,SAAAA,EACAL,YAAa8H,EAAc9H,YAC3BqE,YAAayD,EAAcE,OAC3B/H,SAAAA,EACAF,YAAAA,EACAuE,SAAAA,EACA/D,wBAAAA,EACAC,wBAAAA,EACA+D,UAAAA,EACAC,kBAAAA,IAGE1F,EAAcgI,eAAY,SAACjH,GAC7BgI,GAAa,SAAAmB,GAAK,OACdA,EAAMC,QAAQpJ,IAAO,EAAImJ,EAAM/D,QAAO,SAAAC,GAAI,OAAIA,IAASrF,CAAE,OAACqJ,OAAOF,EAAK,CAAEnJ,GAAG,GAElF,GAAE,IAOH,OAAAL,EAAA,CACI2J,aANiBC,EAAAA,gBAAgB,CACjClJ,aAAAA,EACAD,SAAU4E,EAAgBA,iBAAC5E,KAK3BqE,SAAAA,EACAuC,YAAAA,EACA/H,YAAAA,GACGiK,EACAjB,EAEX,EAKauB,EAAqB,SAAHC,GAAA,IAC3BlE,EAAWkE,EAAXlE,YACA+D,EAAYG,EAAZH,aACAjB,EAAOoB,EAAPpB,QACAC,EAAOmB,EAAPnB,QACAH,EAAMsB,EAANtB,OACAhI,EAAWsJ,EAAXtJ,YAAW,OAEX4D,EAAOA,SACH,WAAA,MAAO,CACHwB,YAAAA,EACA+D,aAAAA,EACAjB,QAAAA,EACAC,QAAAA,EACAH,OAAAA,EACAhI,YAAAA,EACH,GACD,CAACoF,EAAa+D,EAAcjB,EAASC,EAASH,EAAQhI,GACzD,EC/aQuJ,EAAO,SAAH9K,GAcU,IAbvB+K,EAAM/K,EAAN+K,OACA3K,EAAIJ,EAAJI,KACAsK,EAAY1K,EAAZ0K,aACA1I,EAAWhC,EAAXgC,YACAC,EAAWjC,EAAXiC,YACAuB,EAAaxD,EAAbwD,cACAwH,EAAOhL,EAAPgL,QACAC,EAAYjL,EAAZiL,aACAC,EAAWlL,EAAXkL,YACAC,EAAYnL,EAAZmL,aACA/C,EAAWpI,EAAXoI,YACAxE,EAAO5D,EAAP4D,QACAD,EAAc3D,EAAd2D,eAEAyH,EAA8CC,EAAAA,aAAtCC,EAAoBF,EAApBE,qBAAsBC,EAAWH,EAAXG,YAExBC,EAAcrG,EAAAA,SAAQ,WACxB,GAAK3B,EAEL,OAAO,SAACK,EAAgC4H,SACpCT,GAAAA,EAAUnH,EAAO4H,GAEzB,GAAG,CAACjI,EAAewH,IAEbU,EAAmBvG,EAAAA,SAAQ,WAC7B,GAAK3B,EAEL,OAAO,SAACK,EAAgC4H,GACpCH,EAAqBK,EAAaA,cAAC/H,EAAS,CAAEC,MAAAA,IAAU4H,GACxDrD,EAAYvE,EAAMzC,UAClB6J,GAAAA,EAAepH,EAAO4H,GAE9B,GAAG,CAACjI,EAAe8H,EAAsBlD,EAAa6C,EAAcrH,IAE9DgI,EAAkBzG,EAAAA,SAAQ,WAC5B,GAAK3B,EAEL,OAAO,SAACK,EAAgC4H,GACpCH,EAAqBK,EAAaA,cAAC/H,EAAS,CAAEC,MAAAA,IAAU4H,SACxDP,GAAAA,EAAcrH,EAAO4H,GAE5B,GAAE,CAACjI,EAAe8H,EAAsBJ,EAAatH,IAEhDiI,EAAmB1G,EAAAA,SAAQ,WAC7B,GAAK3B,EAEL,OAAO,SAACK,EAAgC4H,GACpCF,IACAnD,EAAY,YACZ+C,GAAAA,EAAetH,EAAO4H,GAE7B,GAAE,CAACjI,EAAe+H,EAAanD,EAAa+C,IAE7C,OACI7K,EAAAA,IAACwL,EAAAA,UAAS,CACNf,OAAQA,EACR3K,KAAMA,EACNsK,aAAcA,EACd1I,YAAaA,EACbC,YAAaA,EACb0B,eAAgBA,EAChBqH,QAASQ,EACTP,aAAcS,EACdR,YAAaU,EACbT,aAAcU,GAG1B,uEC1EME,EAAW,SAAH/L,GAsEe,IArEzBI,EAAIJ,EAAJI,KAAIoE,EAAAxE,EACJoB,GAAAA,OAAE,IAAAoD,EAAGrD,EAAaC,GAAEoD,EAAAC,EAAAzE,EACpBqB,MAAAA,OAAK,IAAAoD,EAAGtD,EAAaE,MAAKoD,EAC1BC,EAAW1E,EAAX0E,YAAWsH,EAAAhM,EACXsB,YAAAA,OAAW,IAAA0K,EAAG7K,EAAaG,YAAW0K,EAAAC,EAAAjM,EAEtC0B,OAAAA,OAAM,IAAAuK,EAAG9K,EAAaO,OAAMuK,EAAAC,EAAAlM,EAE5B2B,WAAAA,OAAU,IAAAuK,EAAG/K,EAAaQ,WAAUuK,EAAAC,EAAAnM,EACpC4B,SAAAA,OAAQ,IAAAuK,EAAGhL,EAAaS,SAAQuK,EAAAC,EAAApM,EAChCwB,SAAAA,OAAQ,IAAA4K,EAAGjL,EAAaK,SAAQ4K,EAAAC,EAAArM,EAChC6B,IAAAA,OAAG,IAAAwK,EAAGlL,EAAaU,IAAGwK,EAAAC,EAAAtM,EACtBuB,YAAakH,OAAgB,IAAA6D,EAAGnL,EAAaI,YAAW+K,EAAAC,EAAAvM,EACxDyB,aAAAA,OAAY,IAAA8K,EAAGpL,EAAaM,aAAY8K,EAAAC,EAAAxM,EACxC8B,wBAAAA,OAAuB,IAAA0K,EAAGrL,EAAaW,wBAAuB0K,EAAAC,EAAAzM,EAC9D+B,wBAAAA,OAAuB,IAAA0K,EAAGtL,EAAaY,wBAAuB0K,EAE9DxM,EAAKD,EAALC,MACAC,EAAMF,EAANE,OACQwM,EAAa1M,EAArB2M,OAAMhI,EAAA3E,EAENoD,OAAAA,OAAM,IAAAuB,EAAGxD,EAAaiC,OAAMuB,EAAAiI,EAAA5M,EAG5BgC,YAAAA,OAAW,IAAA4K,EAAGzL,EAAaa,YAAW4K,EAAAC,EAAA7M,EACtCiC,YAAAA,OAAW,IAAA4K,EAAG1L,EAAac,YAAW4K,EAAAC,EAAA9M,EAGtCoC,gBAAAA,OAAe,IAAA0K,EAAG3L,EAAaiB,gBAAe0K,EAAAC,EAAA/M,EAC9CqC,SAAAA,OAAQ,IAAA0K,EAAG5L,EAAakB,SAAQ0K,EAAAC,EAAAhN,EAChCsC,mBAAAA,OAAkB,IAAA0K,EAAG7L,EAAamB,mBAAkB0K,EAAAC,EAAAjN,EACpDwC,mBAAAA,OAAkB,IAAAyK,EAAG9L,EAAaqB,mBAAkByK,EAAAC,GAAAlN,EACpDuC,sBAAAA,QAAqB,IAAA2K,GAAG/L,EAAaoB,sBAAqB2K,GAC1DC,GAAkBnN,EAAlBmN,mBAAkBC,GAAApN,EAGlB0C,oBAAAA,QAAmB,IAAA0K,GAAGjM,EAAauB,oBAAmB0K,GAAAC,GAAArN,EACtD2C,aAAAA,QAAY,IAAA0K,GAAGlM,EAAawB,aAAY0K,GAAAC,GAAAtN,EACxC4C,uBAAAA,QAAsB,IAAA0K,GAAGnM,EAAayB,uBAAsB0K,GAAAC,GAAAvN,EAC5D6C,oBAAAA,QAAmB,IAAA0K,GAAGpM,EAAa0B,oBAAmB0K,GAAAC,GAAAxN,EACtD8C,4BAAAA,QAA2B,IAAA0K,GAAGrM,EAAa2B,4BAA2B0K,GAAAC,GAAAzN,EACtE+C,4BAAAA,QAA2B,IAAA0K,GAAGtM,EAAa4B,4BAA2B0K,GAAAC,GAAA1N,EACtEgD,uBAAAA,QAAsB,IAAA0K,GAAGvM,EAAa6B,uBAAsB0K,GAAAC,GAAA3N,EAC5DiD,wBAAAA,QAAuB,IAAA0K,GAAGxM,EAAa8B,wBAAuB0K,GAAAC,GAAA5N,EAC9DkD,uBAAAA,QAAsB,IAAA0K,GAAGzM,EAAa+B,uBAAsB0K,GAAAC,GAAA7N,EAC5DmD,mBAAAA,QAAkB,IAAA0K,GAAG1M,EAAagC,mBAAkB0K,GACpDC,GAAqB9N,EAArB8N,sBAAqBC,GAAA/N,EAGrBsD,KAAAA,QAAI,IAAAyK,GAAG5M,EAAamC,KAAIyK,GAAAC,GAAAhO,EACxBuD,KAAAA,QAAI,IAAAyK,GAAG7M,EAAaoC,KAAIyK,GAAAC,GAAAjO,EAGxBwD,cAAAA,QAAa,IAAAyK,GAAG9M,EAAaqC,cAAayK,GAC1CjD,GAAOhL,EAAPgL,QACAC,GAAYjL,EAAZiL,aACAC,GAAWlL,EAAXkL,YACAC,GAAYnL,EAAZmL,aAAY+C,GAAAlO,EACZ4D,QAAAA,QAAO,IAAAsK,GAAG/M,EAAayC,QAAOsK,GACpBvG,GAAiB3H,EAA3B6F,SACA+B,GAAgB5H,EAAhB4H,iBACAE,GAAe9H,EAAf8H,gBAAeqG,GAAAnO,EAEf2D,eAAAA,QAAc,IAAAwK,GAAGhN,EAAawC,eAAcwK,GAAAC,GAAApO,EAE5CG,QAAAA,QAAO,IAAAiO,GAAGjN,EAAahB,QAAOiO,GAC9BrI,GAAiB/F,EAAjB+F,kBAAiBsI,GAAArO,EAEjBkE,KAAAA,QAAI,IAAAmK,GAAGlN,EAAa+C,KAAImK,GAExBC,GAAqEC,EAAaA,cAC9EtO,EACAC,EACAwM,GAHI8B,GAAUF,GAAVE,WAAYC,GAAWH,GAAXG,YAAa9B,GAAM2B,GAAN3B,OAAQ+B,GAAUJ,GAAVI,WAAYC,GAAWL,GAAXK,YAM/CC,GAAiBrK,EAA4B,CAC/CnE,KAAAA,EACAgB,GAAAA,EACAC,MAAAA,EACAqD,YAAAA,EACAtB,OAAAA,IAGJyL,GAUIvG,EAAwB,CACxBlI,KAAMwO,GACN3O,MAAOyO,GACPxO,OAAQyO,GACR9M,IAAAA,EACAN,YAAakH,EACb9G,WAAAA,EACAC,SAAAA,EACAJ,SAAAA,EACAF,YAAAA,EACAG,aAAAA,EACAK,wBAAAA,EACAC,wBAAAA,EACA8D,SAAU8B,GACVC,iBAAAA,GACAE,gBAAAA,GACA/B,kBAAAA,KAzBAY,GAAWkI,GAAXlI,YACAS,GAAUyH,GAAVzH,WACAsD,GAAYmE,GAAZnE,aACAjB,GAAOoF,GAAPpF,QACAC,GAAOmF,GAAPnF,QACAH,GAAMsF,GAANtF,OACAhI,GAAWsN,GAAXtN,YACA6G,GAAWyG,GAAXzG,YACA/H,GAAWwO,GAAXxO,YAoBEyO,GAAYC,EAAQA,SAACzL,GAAMqD,GAAapD,IAExCyL,GAA2C,CAC7CC,KAAM,KACNC,cAAe,KACfC,UAAW,KACXhP,QAAS,MAGTuB,EAAOgF,SAAS,UAChBsI,GAAUC,KACN3O,EAAAO,IAACiK,EAAI,CAEDC,OAAQ,CAACtB,GAASC,IAClBtJ,KAAMuG,GACN+D,aAAcA,GACd1I,YAAaA,EACbC,YAAaA,EACbuB,cAAeA,GACfwH,QAASA,GACTC,aAAcA,GACdC,YAAaA,GACbC,aAAcA,GACd/C,YAAaA,GACbxE,QAASA,GACTD,eAAgBA,IAbZ,SAkBZjB,IAAuBhB,EAAOgF,SAAS,mBACvCsI,GAAUE,cACN5O,EAAAO,IAACuO,qBAAkB,CAEfrE,OAAQ,CAACtB,GAASC,IAClBtJ,KAAMuG,GACNnB,MAAO7C,GACP0M,UAAWzM,GACX0M,OAAQzM,GACR0M,eAAgBzM,GAChB0M,eAAgBzM,GAChB0M,YAAazM,GACb0M,WAAYzM,GACZ0M,UAAWzM,GACX0M,UAAWzM,GACX0M,UAAW/B,IAZP,kBAiBZ1L,GAAmBV,EAAOgF,SAAS,eACnCsI,GAAUG,UACN7O,EAAAO,IAACiP,iBAAc,CAEX/E,OAAQ,CAACtB,GAASC,IAClBtJ,KAAMuG,GACNnB,MAAOnD,EACP0N,aAAcxN,GACd8M,UAAW/M,EACXqN,UAAWnN,EACXmB,eAAgBA,GAChBkM,UAAW1C,IARP,cAaZhN,GAAQ6P,OAAS,GAAKtO,EAAOgF,SAAS,aACtCsI,GAAU7O,QACNG,EAAAO,IAACd,EAAU,CAEPE,MAAOyO,GACPxO,OAAQyO,GACRvO,KAAMgH,GACNjH,QAASA,GACTE,YAAaA,IALT,YAUhB,IAAM4P,GAAerF,EAA6B,CAC9CjE,YAAAA,GACA+D,aAAAA,GACAjB,QAAAA,GACAC,QAAAA,GACAH,OAAAA,GACAhI,YAAAA,KAGJ,OACIjB,EAAAA,IAAC4P,EAAAA,WAAU,CACPjQ,MAAOuO,GACPtO,OAAQuO,GACR9B,OAAQA,GACRrJ,KAAMwL,GACN5K,KAAMA,GAAK1D,SAEVkB,EAAOjB,KAAI,SAAC0P,EAAOxP,GAChB,YAAuCO,IAAnC8N,GAAUmB,GACHnB,GAAUmB,GAGA,mBAAVA,EACA7P,EAAAA,IAAC8P,EAAAA,SAAQ,CAAA5P,SAAUmL,EAAAA,cAAcwE,EAAOF,KAAzBtP,GAGnB,SAIvB,EAEa0P,EAAM,SAAH1K,GAAA,IAAA2K,EAAA3K,EACZnC,cAAAA,OAAa,IAAA8M,EAAGnP,EAAaqC,cAAa8M,EAAAC,EAAA5K,EAC1ClC,QAAAA,OAAO,IAAA8M,EAAGpP,EAAasC,QAAO8M,EAAAC,EAAA7K,EAC9BjC,aAAAA,OAAY,IAAA8M,EAAGrP,EAAauC,aAAY8M,EACxC/N,EAAKkD,EAALlD,MACAgO,EAAa9K,EAAb8K,cACGC,EAAU3G,EAAApE,EAAAqE,GAAA,OAEb1J,EAAAA,IAACqQ,EAAAA,UAAS,CAEFlN,QAAAA,EACAD,cAAAA,EACAE,aAAAA,EACA+M,cAAAA,EACAhO,MAAAA,EAAKjC,SAGTF,EAAAA,IAACyL,EAAQhL,EAAA,CAAWyC,cAAeA,GAAmBkN,KAC9C,8CCjPVE,EAAiB,SAAH5Q,GAyDY,IAxD5BI,EAAIJ,EAAJI,KAAIoE,EAAAxE,EACJoB,GAAAA,OAAE,IAAAoD,EAAGrD,EAAaC,GAAEoD,EAAAC,EAAAzE,EACpBqB,MAAAA,OAAK,IAAAoD,EAAGtD,EAAaE,MAAKoD,EAC1BC,EAAW1E,EAAX0E,YAAWsH,EAAAhM,EACXsB,YAAAA,OAAW,IAAA0K,EAAG7K,EAAaG,YAAW0K,EAAAE,EAAAlM,EAEtC2B,WAAAA,OAAU,IAAAuK,EAAG/K,EAAaQ,WAAUuK,EAAAC,EAAAnM,EACpC4B,SAAAA,OAAQ,IAAAuK,EAAGhL,EAAaS,SAAQuK,EAAAC,EAAApM,EAChCwB,SAAAA,OAAQ,IAAA4K,EAAGjL,EAAaK,SAAQ4K,EAAAC,EAAArM,EAChC6B,IAAAA,OAAG,IAAAwK,EAAGlL,EAAaU,IAAGwK,EAAAC,EAAAtM,EACtBuB,YAAakH,OAAgB,IAAA6D,EAAGnL,EAAaI,YAAW+K,EAAAC,EAAAvM,EACxDyB,aAAAA,OAAY,IAAA8K,EAAGpL,EAAaM,aAAY8K,EAAAC,EAAAxM,EACxC8B,wBAAAA,OAAuB,IAAA0K,EAAGrL,EAAaW,wBAAuB0K,EAAAC,EAAAzM,EAC9D+B,wBAAAA,OAAuB,IAAA0K,EAAGtL,EAAaY,wBAAuB0K,EAE9DxM,EAAKD,EAALC,MACAC,EAAMF,EAANE,OACQwM,EAAa1M,EAArB2M,OAAMkE,EAAA7Q,EACNmE,WAAAA,OAAU,IAAA0M,EAAG1P,EAAagD,WAAU0M,EAAAlM,EAAA3E,EAEpCoD,OAAAA,OAAM,IAAAuB,EAAGxD,EAAaiC,OAAMuB,EAAAiI,EAAA5M,EAG5BgC,YAAAA,OAAW,IAAA4K,EAAGzL,EAAaa,YAAW4K,EAAAC,EAAA7M,EACtCiC,YAAAA,OAAW,IAAA4K,EAAG1L,EAAac,YAAW4K,EAAAC,EAAA9M,EAGtCoC,gBAAAA,OAAe,IAAA0K,EAAG3L,EAAaiB,gBAAe0K,EAAAC,EAAA/M,EAC9CqC,SAAAA,OAAQ,IAAA0K,EAAG5L,EAAakB,SAAQ0K,EAAAC,EAAAhN,EAChCsC,mBAAAA,OAAkB,IAAA0K,EAAG7L,EAAamB,mBAAkB0K,EAAAC,EAAAjN,EACpDwC,mBAAAA,QAAkB,IAAAyK,EAAG9L,EAAaqB,mBAAkByK,EAAAC,GAAAlN,EACpDuC,sBAAAA,QAAqB,IAAA2K,GAAG/L,EAAaoB,sBAAqB2K,GAAAE,GAAApN,EAG1D0C,oBAAAA,QAAmB,IAAA0K,GAAGjM,EAAauB,oBAAmB0K,GAAAC,GAAArN,EACtD2C,aAAAA,QAAY,IAAA0K,GAAGlM,EAAawB,aAAY0K,GAAAC,GAAAtN,EACxC4C,uBAAAA,QAAsB,IAAA0K,GAAGnM,EAAayB,uBAAsB0K,GAAAC,GAAAvN,EAC5D6C,oBAAAA,QAAmB,IAAA0K,GAAGpM,EAAa0B,oBAAmB0K,GAAAC,GAAAxN,EACtD8C,4BAAAA,QAA2B,IAAA0K,GAAGrM,EAAa2B,4BAA2B0K,GAAAC,GAAAzN,EACtE+C,4BAAAA,QAA2B,IAAA0K,GAAGtM,EAAa4B,4BAA2B0K,GAAAC,GAAA1N,EACtEgD,uBAAAA,QAAsB,IAAA0K,GAAGvM,EAAa6B,uBAAsB0K,GAAAC,GAAA3N,EAC5DiD,wBAAAA,QAAuB,IAAA0K,GAAGxM,EAAa8B,wBAAuB0K,GAAAC,GAAA5N,EAC9DkD,uBAAAA,QAAsB,IAAA0K,GAAGzM,EAAa+B,uBAAsB0K,GAAAC,GAAA7N,EAC5DmD,mBAAAA,QAAkB,IAAA0K,GAAG1M,EAAagC,mBAAkB0K,GAAAI,GAAAjO,EAGpDwD,cAAAA,QAAa,IAAAyK,GAAG9M,EAAaqC,cAAayK,GAC1CjD,GAAOhL,EAAPgL,QACAE,GAAWlL,EAAXkL,YAAWgD,GAAAlO,EACX4D,QAAAA,QAAO,IAAAsK,GAAG/M,EAAayC,QAAOsK,GACpBvG,GAAiB3H,EAA3B6F,SACA+B,GAAgB5H,EAAhB4H,iBACAE,GAAe9H,EAAf8H,gBAAesG,GAAApO,EAEfG,QAAAA,QAAO,IAAAiO,GAAGjN,EAAahB,QAAOiO,GAC9BrI,GAAiB/F,EAAjB+F,kBAEM+K,GAAWxJ,SAAiC,MAC5C7E,GAAQsO,EAAAA,WAEdzC,GAAqEC,EAAaA,cAC9EtO,EACAC,EACAwM,GAHIC,GAAM2B,GAAN3B,OAAQ+B,GAAUJ,GAAVI,WAAYC,GAAWL,GAAXK,YAAaH,GAAUF,GAAVE,WAAYC,GAAWH,GAAXG,YAM/CG,GAAiBrK,EAA4B,CAC/CnE,KAAAA,EACAgB,GAAAA,EACAC,MAAAA,EACAqD,YAAAA,EACAtB,OAAAA,IAGJyL,GACIvG,EAAwB,CACpBlI,KAAMwO,GACN3O,MAAOyO,GACPxO,OAAQyO,GACR9M,IAAAA,EACAN,YAAakH,EACb9G,WAAAA,EACAC,SAAAA,EACAJ,SAAAA,EACAF,YAAAA,EACAG,aAAAA,EACAK,wBAAAA,EACAC,wBAAAA,EACA8D,SAAU8B,GACVC,iBAAAA,GACAE,gBAAAA,GACA/B,kBAAAA,KAjBAY,GAAWkI,GAAXlI,YAAa+D,GAAYmE,GAAZnE,aAAcjB,GAAOoF,GAAPpF,QAASC,GAAOmF,GAAPnF,QAASH,GAAMsF,GAANtF,OAAQhI,GAAWsN,GAAXtN,YAAa6G,GAAWyG,GAAXzG,YAoBpE4I,GAAiBC,EAAAA,kBAA2ChP,EAAaQ,IAEzE0M,GAAY+B,EAAAA,aAAsC,CACpD9Q,KAAMuG,GACNnB,MAAOnD,EACPgN,UAAW/M,EACXgN,OAAQ/M,GACRoN,UAAWnN,KAGT0M,GAAgBiC,EAAAA,iBAA0C,CAC5D/Q,KAAMuG,GACN0I,UAAWzM,GACX0M,OAAQzM,GACR0M,eAAgBzM,GAChB0M,eAAgBzM,GAChByC,MAAO7C,GACPiN,UAAWzM,GACXuM,WAAYzM,GACZ0M,UAAWzM,KAGfqE,EAAAA,WAAU,WACN,GAAKuJ,GAAStJ,QAAd,CAEAsJ,GAAStJ,QAAQvH,MAAQuO,GAAarK,EACtC2M,GAAStJ,QAAQtH,OAASuO,GAActK,EAExC,IAAMiN,EAAMN,GAAStJ,QAAQ6J,WAAW,MAExCD,EAAIE,MAAMnN,EAAYA,GAEtBiN,EAAIG,UAAY9O,GAAM+O,WACtBJ,EAAIK,SAAS,EAAG,EAAGjD,GAAYC,IAE/B2C,EAAIM,OACJN,EAAIO,UAAUhF,GAAOiF,KAAMjF,GAAOkF,KAClCnH,GAAaoH,QAAQV,GAErBA,EAAIM,OACJN,EAAIO,UAAUlI,GAASC,IAEvB/C,GAAYoL,SAAQ,SAAAnL,GAChBwK,EAAIY,YACJZ,EAAIG,UAAY3K,EAAI3C,MAEpBmN,EAAIa,YAAcjB,GAAepK,GACjCwK,EAAIc,UAAYlQ,EAEhB0I,GAAa9D,EAAIA,KAEjBwK,EAAI7N,OAEAvB,EAAc,GACdoP,EAAIe,QAEZ,KAE4B,IAAxBzP,IACA0P,EAAAA,wBACIhB,EACAlC,GACAzM,GACAO,KAIgB,IAApBZ,GACAiQ,EAAAA,oBAA6CjB,EAAKjC,GAAW1M,IAKjE2O,EAAIkB,UACJnS,GAAQ4R,SAAQ,SAAArR,GACZ6R,EAAAA,qBAAqBnB,EAAGrQ,KACjBL,EAAM,CACTN,KAAMuG,GACN3F,eAAgB0N,GAChBzN,gBAAiB0N,GACjBlM,MAAAA,KAER,GA3DuB,CA4D1B,GAAE,CACCqO,GACApC,GACAC,GACAH,GACAC,GACA9B,GAAOkF,IACPlF,GAAOiF,KACPzN,EACAsF,GACAC,GACAgB,GACA/D,GACA3E,EACAgP,GACA5O,EACA+M,GACAzM,GACAwM,GACAlM,GACA7C,GACAsC,KAGJ,IAAMwM,GAAO9J,EAAAA,SACT,WAAA,OACIwB,GAAYlG,KAAI,SAAAoD,GAAK,OAAA9C,EAAA,CACjBK,GAAIyC,EAAMzC,IACPyC,EAAM+C,IAAG,MAEpB,CAACD,KAGC6L,GAAkB,SAAC/G,GACrB,IAAKqF,GAAStJ,QAAS,OAAO,KAE9B,IAAAiL,EAAeC,EAAiBA,kBAAC5B,GAAStJ,QAASiE,GAA5CtB,EAACsI,EAAA,GAAErI,EAACqI,EAAA,GAELE,EAAaC,EAAkBA,mBACjCjG,GAAOiF,KAAOnI,GACdkD,GAAOkF,IAAMnI,GACbH,GACAhI,GACA0N,GACA9E,EACAC,GAGJ,OAAKuI,EAEEhM,GAAYkM,MAAK,SAAAhP,GAAK,OAAIA,EAAMzC,KAAOuR,EAAWvR,MAFjC,MAK5BgK,GAA8CC,EAAAA,aAAtCC,GAAoBF,GAApBE,qBAAsBC,GAAWH,GAAXG,YAExBuH,GAAmB,SAACrH,GACtB,IAAM5H,EAAQ2O,GAAgB/G,GAC1B5H,SACAqH,IAAAA,GAAcrH,EAAO4H,GACrBrD,GAAYvE,EAAMzC,IAClBkK,GAAqBK,EAAaA,cAAC/H,GAAS,CAAEC,MAAAA,IAAU4H,KAExDrD,GAAY,MACZmD,OAiBR,OACIjL,EAAAA,IAAA,SAAA,CACIyS,IAAKjC,GACL7Q,MAAOuO,GAAarK,EACpBjE,OAAQuO,GAActK,EACtB6O,MAAO,CACH/S,MAAOuO,GACPtO,OAAQuO,GACRwE,OAAQzP,GAAgB,OAAS,UAErCyH,aAAczH,GAAgBsP,QAAmB5R,EACjDgK,YAAa1H,GAAgBsP,QAAmB5R,EAChDiK,aAAc3H,GAzBG,WACrB+H,WAwBqDrK,EACjD8J,QAASxH,GAtBG,SAACiI,GACjB,GAAKT,GAAL,CAEA,IAAMpE,EAAM4L,GAAgB/G,GACxB7E,GACAoE,GAAQpE,EAAK6E,EAJH,QAqB6BvK,GAGnD,EAEagS,EAAY,SAAHvN,GAAA,IAAA2K,EAAA3K,EAClBnC,cAAAA,OAAa,IAAA8M,EAAGnP,EAAaqC,cAAa8M,EAC1C7N,EAAKkD,EAALlD,MACAgO,EAAa9K,EAAb8K,cACGC,EAAU3G,EAAApE,EAAAqE,GAAA,OAEb1J,EAAAA,IAACqQ,EAAAA,UAAS,CAAOnN,cAAAA,EAAeiN,cAAAA,EAAehO,MAAAA,EAAKjC,SAChDF,EAAAA,IAACsQ,EAAc7P,EAAA,CAAWyC,cAAeA,GAAmBkN,KACpD,0DC1Sa,SACzByC,GAAsD,OAEtD7S,EAAAA,IAAC8S,EAAAA,kBAAiB,CAAA5S,SACb,SAAAR,GAAA,IAAGC,EAAKD,EAALC,MAAOC,EAAMF,EAANE,OAAM,OACbI,EAAAO,IAACwP,EAAGtP,EAAA,CAAWd,MAAOA,EAAOC,OAAQA,GAAYiT,GAAS,GAE9C,8BCPW,SAC/BA,GAAyD,OAEzD7S,EAAAA,IAAC8S,EAAAA,kBAAiB,CAAA5S,SACb,SAAAR,GAAA,IAAGC,EAAKD,EAALC,MAAOC,EAAMF,EAANE,OAAM,OACbI,EAAAO,IAACqS,EAASnS,EAAA,CAAWd,MAAOA,EAAOC,OAAQA,GAAYiT,GAAS,GAEpD,oEL2NF,SAAHE,GAgCb,IA/BFjT,EAAIiT,EAAJjT,KACAmJ,EAAM8J,EAAN9J,OACAhI,EAAW8R,EAAX9R,YAAW+R,EAAAD,EACX1R,WAAAA,OAAU,IAAA2R,EAAGnS,EAAaQ,WAAU2R,EAAAC,EAAAF,EACpCzR,SAAAA,OAAQ,IAAA2R,EAAGpS,EAAaS,SAAQ2R,EAAAC,EAAAH,EAChC7R,SAAAA,OAAQ,IAAAgS,EAAGrS,EAAaK,SAAQgS,EAAAC,EAAAJ,EAChC/R,YAAAA,OAAW,IAAAmS,EAAGtS,EAAaG,YAAWmS,EAAAC,EAAAL,EACtC5R,aAAAA,OAAY,IAAAiS,EAAGvS,EAAaM,aAAYiS,EAAAC,EAAAN,EACxCvR,wBAAAA,OAAuB,IAAA6R,EAAGxS,EAAaW,wBAAuB6R,EAAAC,EAAAP,EAC9DtR,wBAAAA,OAAuB,IAAA6R,EAAGzS,EAAaY,wBAAuB6R,EACpDjM,EAAiB0L,EAA3BxN,SACA+B,EAAgByL,EAAhBzL,iBACAE,EAAeuL,EAAfvL,gBACA/B,EAAiBsN,EAAjBtN,kBAmBA8N,EAAkCpM,EAAY,CAC1C5B,SAAU8B,EACVC,iBAAAA,EACAE,gBAAAA,IAHIjC,EAAQgO,EAARhO,SAAUuC,EAAWyL,EAAXzL,YAMlB0L,EAAkC7L,EAAQA,SAAY,IAA/CnC,EAASgO,EAAA,GAAE1K,EAAY0K,EAAA,GACxBxJ,EAAU5E,EAAW,CACvBtF,KAAAA,EACAuB,WAAAA,EACAC,SAAAA,EACAL,YAAAA,EACAqE,YAAa2D,EACb/H,SAAAA,EACAF,YAAAA,EACAuE,SAAAA,EACA/D,wBAAAA,EACAC,wBAAAA,EACA+D,UAAAA,EACAC,kBAAAA,IAGE1F,EAAcgI,eAAY,SAACjH,GAC7BgI,GAAa,SAAAmB,GAAK,OACdA,EAAMC,QAAQpJ,IAAO,EAAImJ,EAAM/D,QAAO,SAAAC,GAAI,OAAIA,IAASrF,CAAE,OAACqJ,OAAOF,EAAK,CAAEnJ,GAAG,GAElF,GAAE,IAIH,OAAAL,KAAYuJ,EAAO,CAAEI,aAFAC,EAAAA,gBAAgB,CAAElJ,aAAAA,EAAcD,SAAU4E,EAAgBA,iBAAC5E,KAE7C4G,YAAAA,EAAa/H,YAAAA,GACpD"}