{"version":3,"file":"nivo-bar.es.js","sources":["../src/BarAnnotations.tsx","../src/BarLegends.tsx","../src/BarItem.tsx","../src/BarTooltip.tsx","../src/props.ts","../src/compute/common.ts","../src/compute/grouped.ts","../src/compute/stacked.ts","../src/compute/legends.ts","../src/compute/totals.ts","../src/hooks.ts","../src/BarTotals.tsx","../src/Bar.tsx","../src/BarCanvas.tsx","../src/ResponsiveBar.tsx","../src/ResponsiveBarCanvas.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { BarCanvasLayerId, BarLayerId, ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'] as BarLayerId[],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'] as BarCanvasLayerId[],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: readonly RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: readonly RawDatum[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: readonly RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <RawDatum extends BarDatum>(\n    bars: ComputedBarDatum<RawDatum>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    groupMode: BarCommonProps<RawDatum>['groupMode'] = defaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n    totalsOffset = defaultProps.totalsOffset,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n    totalsOffset?: BarCommonProps<RawDatum>['totalsOffset']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n","import { useTheme } from '@nivo/core'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n                fill: theme.text.fill,\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './props'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as readonly BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    CompleteTheme,\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n    useValueFormatter,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<RawDatum extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: CompleteTheme,\n    layout: BarCommonProps<RawDatum>['layout'] = canvasDefaultProps.layout\n) {\n    ctx.fillStyle = theme.text.fill\n    ctx.font = `bold ${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        ctx.fillText(barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarSvgProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: ResponsiveBarSvgProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: ResponsiveBarCanvasProps<RawDatum>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"names":["BarAnnotations","_ref","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","_ref2","size","Math","max","_jsx","_Fragment","children","map","annotation","i","Annotation","_extends","BarLegends","legends","toggleSerie","_legend$data","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","BarItem","_data$fill","_ref$bar","_objectWithoutPropertiesLoose","_excluded","_ref$style","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","theme","useTheme","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","animated","g","rect","to","value","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","text","textAnchor","dominantBaseline","fillOpacity","labels","pointerEvents","BarTooltip","BasicTooltip","id","formattedValue","enableChip","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","tooltipLabel","datum","indexValue","initialHiddenIds","markers","enableTotals","totalsOffset","svgDefaultProps","layers","barComponent","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","gt","other","lt","range","start","end","Array","repeat","_","index","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","_ref$innerPadding","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","_xScale","d","_yScale","_coerceValue","rawValue","barHeight","_yScale2","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","_ref2$innerPadding","_yScale3","_xScale2","_coerceValue2","_xScale3","getWidth","generateGroupedBars","_ref3","_scale","_ref3$padding","_ref3$innerPadding","indexScaleConfig","_ref3$hiddenIds","hiddenIds","props","filter","includes","_ref4","otherAxis","scaleSpec","clampMin","values","entry","concat","k","Boolean","apply","isFinite","scale","_ref5","bandwidth","params","flattenDeep","arr","some","isArray","generateVerticalStackedBars","stackedData","stackedDataItem","_getY","getY","generateHorizontalStackedBars","_getX","getX","generateStackedBars","array","_ref4$padding","_ref4$hiddenIds","stack","offset","stackOffsetDiverging","num","_ref6","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","uniqBy","_bar$data$indexValue","_bar$color2","getLegendDataForIndexes","_bar$color","getLegendDataForKeys","updateTotalsByIndex","totalsByIndex","currentIndexValue","get","set","updateTotalsPositivesByIndex","totalsPositivesByIndex","updateGreatestValueByIndex","greatestValueByIndex","currentGreatestValue","updateNumberOfBarsByIndex","numberOfBarsByIndex","currentNumberOfBars","useBar","_ref$indexBy","_ref$keys","_ref$label","_ref$tooltipLabel","valueFormat","_ref$colors","_ref$colorBy","_ref$borderColor","_ref$labelTextColor","_ref$groupMode","_ref$layout","_ref$reverse","_ref$minValue","_ref$maxValue","_ref$padding","_ref$valueScale","_ref$indexScale","_ref$initialHiddenIds","_ref$enableLabel","_ref$labelSkipWidth","_ref$labelSkipHeight","_ref$legends","_ref$totalsOffset","_useState","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","_generateBars","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","barTotals","totals","Map","_bar$data","totalsPositive","xPosition","yPosition","animationOffset","indexTotal","_bar$data2","greatestValue","numberOfBars","computeBarTotals","BarTotals","springConfig","useTransition","barTotal","enter","update","leave","config","immediate","initial","totalsTransition","fontWeight","fontSize","fontFamily","alignmentBaseline","InnerBar","partialMargin","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$barComponent","_ref$markers","_ref$defs","_ref$fill","_ref$borderRadius","_ref$borderWidth","_ref$annotations","_ref$isInteractive","_ref$tooltip","_ref$role","_ref$isFocusable","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","_ref$enableTotals","_useMotionConfig","useMotionConfig","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBar","transition","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","_layerById$layer","Bar","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","_ref$renderBar","renderBar","ctx","_ref2$bar","fillStyle","strokeStyle","lineWidth","beginPath","radius","moveTo","lineTo","quadraticCurveTo","closePath","textBaseline","textAlign","fillText","_ref$pixelRatio","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","_canvasEl$current","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","renderAnnotationsToCanvas","font","renderTotalsToCanvas","save","handleMouseHover","_getRelativeCursor","getRelativeCursor","_getRelativeCursor2","_getRelativeCursor3","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas"],"mappings":"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"}