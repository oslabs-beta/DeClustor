{"version":3,"file":"nivo-geo.es.js","sources":["../src/hooks.js","../src/ChoroplethTooltip.js","../src/props.js","../src/GeoGraticule.js","../src/GeoMapFeature.js","../src/GeoMap.js","../src/ResponsiveGeoMap.js","../src/GeoMapCanvas.js","../src/ResponsiveGeoMapCanvas.js","../src/Choropleth.js","../src/ResponsiveChoropleth.js","../src/ChoroplethCanvas.js","../src/ResponsiveChoroplethCanvas.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useMemo } from 'react'\nimport isFunction from 'lodash/isFunction'\nimport get from 'lodash/get'\nimport { format } from 'd3-format'\nimport {\n    geoPath,\n    geoAzimuthalEqualArea,\n    geoAzimuthalEquidistant,\n    geoGnomonic,\n    geoOrthographic,\n    geoStereographic,\n    geoEqualEarth,\n    geoEquirectangular,\n    geoMercator,\n    geoTransverseMercator,\n    geoNaturalEarth1,\n    geoGraticule,\n} from 'd3-geo'\nimport { guessQuantizeColorScale, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useQuantizeColorScaleLegendData } from '@nivo/legends'\n\nexport const projectionById = {\n    azimuthalEqualArea: geoAzimuthalEqualArea,\n    azimuthalEquidistant: geoAzimuthalEquidistant,\n    gnomonic: geoGnomonic,\n    orthographic: geoOrthographic,\n    stereographic: geoStereographic,\n    equalEarth: geoEqualEarth,\n    equirectangular: geoEquirectangular,\n    mercator: geoMercator,\n    transverseMercator: geoTransverseMercator,\n    naturalEarth1: geoNaturalEarth1,\n}\n\nexport const useGeoMap = ({\n    width,\n    height,\n    projectionType,\n    projectionScale,\n    projectionTranslation,\n    projectionRotation,\n    fillColor,\n    borderWidth,\n    borderColor,\n}) => {\n    const projection = useMemo(() => {\n        return projectionById[projectionType]()\n            .scale(projectionScale)\n            .translate([width * projectionTranslation[0], height * projectionTranslation[1]])\n            .rotate(projectionRotation)\n    }, [\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation[0],\n        projectionTranslation[1],\n        projectionRotation[0],\n        projectionRotation[1],\n        projectionRotation[2],\n    ])\n    const path = useMemo(() => geoPath(projection), [projection])\n    const graticule = useMemo(() => geoGraticule())\n\n    const theme = useTheme()\n    const getBorderWidth = useMemo(\n        () => (typeof borderWidth === 'function' ? borderWidth : () => borderWidth),\n        [borderWidth]\n    )\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getFillColor = useMemo(\n        () => (typeof fillColor === 'function' ? fillColor : () => fillColor),\n        [fillColor]\n    )\n\n    return {\n        projection,\n        path,\n        graticule,\n        getBorderWidth,\n        getBorderColor,\n        getFillColor,\n    }\n}\n\nexport const useChoropleth = ({\n    features,\n    data,\n    match,\n    label,\n    value,\n    valueFormat,\n    colors,\n    unknownColor,\n    domain,\n}) => {\n    const findMatchingDatum = useMemo(() => {\n        if (isFunction(match)) return match\n        return (feature, datum) => {\n            const featureKey = get(feature, match)\n            const datumKey = get(datum, match)\n\n            return featureKey && featureKey === datumKey\n        }\n    }, [match])\n    const getLabel = useMemo(\n        () => (isFunction(label) ? label : datum => get(datum, label)),\n        [label]\n    )\n    const getValue = useMemo(\n        () => (isFunction(value) ? value : datum => get(datum, value)),\n        [value]\n    )\n    const valueFormatter = useMemo(() => {\n        if (valueFormat === undefined) return d => d\n        if (isFunction(valueFormat)) return valueFormat\n        return format(valueFormat)\n    }, [valueFormat])\n\n    const colorScale = useMemo(\n        () => guessQuantizeColorScale(colors).domain(domain),\n        [colors, domain]\n    )\n    const getFillColor = useMemo(() => {\n        return feature => {\n            if (feature.value === undefined) return unknownColor\n            return colorScale(feature.value)\n        }\n    }, [colorScale, unknownColor])\n\n    const boundFeatures = useMemo(\n        () =>\n            features.map(feature => {\n                const datum = data.find(datum => findMatchingDatum(feature, datum))\n                const datumValue = getValue(datum)\n\n                if (datum) {\n                    const featureWithData = {\n                        ...feature,\n                        data: datum,\n                        value: datumValue,\n                        formattedValue: valueFormatter(datumValue),\n                    }\n                    featureWithData.color = getFillColor(featureWithData)\n                    featureWithData.label = getLabel(featureWithData)\n\n                    return featureWithData\n                }\n\n                return feature\n            }),\n        [features, data, findMatchingDatum, getValue, valueFormatter, getFillColor]\n    )\n\n    const legendData = useQuantizeColorScaleLegendData({\n        scale: colorScale,\n        valueFormat: valueFormatter,\n    })\n\n    return {\n        colorScale,\n        getFillColor,\n        boundFeatures,\n        valueFormatter,\n        legendData,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst ChoroplethTooltip = memo(({ feature }) => {\n    if (feature.data === undefined) return null\n\n    return (\n        <BasicTooltip\n            id={feature.label}\n            color={feature.color}\n            enableChip={true}\n            value={feature.formattedValue}\n        />\n    )\n})\n\nChoroplethTooltip.propTypes = {\n    feature: PropTypes.object.isRequired,\n}\n\nChoroplethTooltip.displayName = 'ChoroplethTooltip'\n\nexport default ChoroplethTooltip\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { quantizeColorScalePropType } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\nimport { projectionById } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst commonPropTypes = {\n    features: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            type: PropTypes.oneOf(['Feature']).isRequired,\n            properties: PropTypes.object,\n            geometry: PropTypes.object.isRequired,\n        })\n    ).isRequired,\n\n    projectionType: PropTypes.oneOf(Object.keys(projectionById)).isRequired,\n    projectionScale: PropTypes.number.isRequired,\n    projectionTranslation: PropTypes.arrayOf(PropTypes.number).isRequired,\n    projectionRotation: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n    fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    borderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    borderColor: inheritedColorPropType.isRequired,\n\n    enableGraticule: PropTypes.bool.isRequired,\n    graticuleLineWidth: PropTypes.number.isRequired,\n    graticuleLineColor: PropTypes.string.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseMove: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n    tooltip: PropTypes.any,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features']), PropTypes.func])\n    ).isRequired,\n}\n\nexport const GeoMapPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const GeoMapCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonChoroplethPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    match: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    valueFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    colors: quantizeColorScalePropType.isRequired,\n    domain: PropTypes.arrayOf(PropTypes.number).isRequired,\n    unknownColor: PropTypes.string.isRequired,\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features', 'legends']), PropTypes.func])\n    ).isRequired,\n}\n\nexport const ChoroplethPropTypes = {\n    ...GeoMapPropTypes,\n    ...commonChoroplethPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const ChoroplethCanvasPropTypes = {\n    ...GeoMapCanvasPropTypes,\n    ...commonChoroplethPropTypes,\n}\n\nconst commonDefaultProps = {\n    projectionType: 'mercator',\n    projectionScale: 100,\n    projectionTranslation: [0.5, 0.5],\n    projectionRotation: [0, 0, 0],\n\n    enableGraticule: false,\n    graticuleLineWidth: 0.5,\n    graticuleLineColor: '#999999',\n\n    fillColor: '#dddddd',\n    borderWidth: 0,\n    borderColor: '#000000',\n\n    isInteractive: true,\n    onMouseEnter: () => {},\n    onMouseLeave: () => {},\n    onMouseMove: () => {},\n    onClick: () => {},\n\n    layers: ['graticule', 'features'],\n    legends: [],\n\n    fill: [],\n    defs: [],\n}\n\nexport const GeoMapDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n}\n\nexport const GeoMapCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nconst commonChoroplethDefaultProps = {\n    match: 'id',\n    label: 'id',\n    value: 'value',\n    colors: 'PuBuGn',\n    unknownColor: '#999',\n    tooltip: ChoroplethTooltip,\n    layers: ['graticule', 'features', 'legends'],\n}\n\nexport const ChoroplethDefaultProps = {\n    ...GeoMapDefaultProps,\n    ...commonChoroplethDefaultProps,\n    role: 'img',\n}\n\nexport const ChoroplethCanvasDefaultProps = {\n    ...GeoMapCanvasDefaultProps,\n    ...commonChoroplethDefaultProps,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GeoGraticule = memo(({ path, graticule, lineWidth, lineColor }) => {\n    return <path fill=\"none\" strokeWidth={lineWidth} stroke={lineColor} d={path(graticule())} />\n})\n\nGeoGraticule.propTypes = {\n    path: PropTypes.func.isRequired,\n    graticule: PropTypes.func.isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineColor: PropTypes.string.isRequired,\n}\n\nGeoGraticule.displayName = 'GeoGraticule'\n\nexport default GeoGraticule\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GeoMapFeature = memo(\n    ({\n        feature,\n        path,\n        fillColor,\n        borderWidth,\n        borderColor,\n        onClick,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n    }) => {\n        return (\n            <path\n                key={feature.id}\n                fill={feature?.fill ?? fillColor}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                strokeLinejoin=\"bevel\"\n                d={path(feature)}\n                onMouseEnter={event => onMouseEnter(feature, event)}\n                onMouseMove={event => onMouseMove(feature, event)}\n                onMouseLeave={event => onMouseLeave(feature, event)}\n                onClick={event => onClick(feature, event)}\n            />\n        )\n    }\n)\n\nGeoMapFeature.propTypes = {\n    feature: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        type: PropTypes.oneOf(['Feature']).isRequired,\n        properties: PropTypes.object,\n        geometry: PropTypes.object.isRequired,\n    }).isRequired,\n    path: PropTypes.func.isRequired,\n\n    fillColor: PropTypes.string.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseMove: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nGeoMapFeature.displayName = 'GeoMapFeature'\n\nexport default GeoMapFeature\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useCallback, memo } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { GeoMapPropTypes } from './props'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap } from './hooks'\n\nconst GeoMap = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        layers = ['graticule', 'features'],\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        fillColor = '#dddddd',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        isInteractive = true,\n        onClick = () => {},\n        tooltip: Tooltip,\n        role = 'img',\n    } = props\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor,\n        borderWidth,\n        borderColor,\n    })\n\n    const theme = useTheme()\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {features.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n\n                return <Fragment key={i}>{layer(props)}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nGeoMap.displayName = 'GeoMap'\nGeoMap.propTypes = GeoMapPropTypes\n\nexport default withContainer(GeoMap)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMap from './GeoMap'\n\nconst ResponsiveGeoMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { GeoMapCanvasPropTypes } from './props'\nimport { useGeoMap } from './hooks'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst GeoMapCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n        features,\n        layers,\n\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n\n        fillColor = '#dddddd',\n        borderWidth = 0,\n        borderColor = '#000000',\n\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n\n        isInteractive = true,\n        onClick = () => {},\n        onMouseMove = () => {},\n        tooltip: Tooltip,\n    } = props\n\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap(\n        {\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor,\n            borderWidth,\n            borderColor,\n        }\n    )\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                features.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else {\n                layer(ctx, props)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        features,\n        layers,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove && onMouseMove(feature || null, event)\n        },\n        [showTooltipFromEvent, hideTooltip, isInteractive, Tooltip, canvasEl, features, projection]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, features, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nGeoMapCanvas.displatName = 'GeoMapCanvas'\nGeoMapCanvas.propTypes = GeoMapCanvasPropTypes\n\nexport default withContainer(GeoMapCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMapCanvas from './GeoMapCanvas'\n\nconst ResponsiveGeoMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMapCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, Fragment, useCallback } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme, bindDefs } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ChoroplethPropTypes } from './props'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap, useChoropleth } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst Choropleth = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        data,\n        match = 'id',\n        label = 'id',\n        value = 'value',\n        valueFormat,\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        colors = 'PuBuGn',\n        domain,\n        unknownColor = '#999',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        layers = ['graticule', 'features', 'legends'],\n        legends = [],\n        isInteractive = true,\n        onClick = () => {},\n        tooltip: Tooltip = ChoroplethTooltip,\n        role = 'img',\n        defs = [],\n        fill = [],\n    } = props\n\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fillColor: () => {},\n        borderWidth,\n        borderColor,\n    })\n    const { getFillColor, boundFeatures, legendData } = useChoropleth({\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        colors,\n        unknownColor,\n        domain,\n    })\n\n    const theme = useTheme()\n\n    const boundDefs = bindDefs(defs, boundFeatures, fill, {\n        dataKey: 'data',\n        targetKey: 'fill',\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {boundFeatures.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n                if (layer === 'legends') {\n                    return legends.map((legend, i) => {\n                        return (\n                            <BoxLegendSvg\n                                key={i}\n                                containerWidth={width}\n                                containerHeight={height}\n                                data={legendData}\n                                {...legend}\n                            />\n                        )\n                    })\n                }\n\n                return <Fragment key={i}>{layer({})}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nChoropleth.displayName = 'Choropleth'\nChoropleth.propTypes = ChoroplethPropTypes\n\nexport default withContainer(Choropleth)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Choropleth from './Choropleth'\n\nconst ResponsiveChoropleth = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Choropleth width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoropleth\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ChoroplethCanvasPropTypes } from './props'\nimport { useGeoMap, useChoropleth } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst ChoroplethCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n        features,\n        data,\n        match = 'id',\n        label = 'id',\n        value = 'value',\n        valueFormat,\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        colors = 'PuBuGn',\n        domain,\n        unknownColor = '#999',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        layers = ['graticule', 'features', 'legends'],\n        legends = [],\n        isInteractive = true,\n        onClick = () => {},\n        onMouseMove = () => {},\n        tooltip: Tooltip = ChoroplethTooltip,\n    } = props\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor: () => {},\n        borderWidth,\n        borderColor,\n    })\n    const { getFillColor, boundFeatures, legendData } = useChoropleth({\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        colors,\n        unknownColor,\n        domain,\n    })\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                boundFeatures.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: width,\n                        containerHeight: height,\n                        theme,\n                    })\n                })\n            } else {\n                // layer(ctx, {})\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        boundFeatures,\n        legends,\n        layers,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(\n                event,\n                canvasEl.current,\n                boundFeatures,\n                projection\n            )\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove && onMouseMove(feature || null, event)\n        },\n        [\n            showTooltipFromEvent,\n            hideTooltip,\n            isInteractive,\n            Tooltip,\n            canvasEl,\n            boundFeatures,\n            projection,\n        ]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(\n                event,\n                canvasEl.current,\n                boundFeatures,\n                projection\n            )\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, boundFeatures, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nChoroplethCanvas.displayName = 'ChoroplethCanvas'\nChoroplethCanvas.propTypes = ChoroplethCanvasPropTypes\n\nexport default withContainer(ChoroplethCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ChoroplethCanvas from './ChoroplethCanvas'\n\nconst ResponsiveChoroplethCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChoroplethCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoroplethCanvas\n"],"names":["projectionById","azimuthalEqualArea","geoAzimuthalEqualArea","azimuthalEquidistant","geoAzimuthalEquidistant","gnomonic","geoGnomonic","orthographic","geoOrthographic","stereographic","geoStereographic","equalEarth","geoEqualEarth","equirectangular","geoEquirectangular","mercator","geoMercator","transverseMercator","geoTransverseMercator","naturalEarth1","geoNaturalEarth1","useGeoMap","_ref","width","height","projectionType","projectionScale","projectionTranslation","projectionRotation","fillColor","borderWidth","borderColor","projection","useMemo","scale","translate","rotate","path","geoPath","graticule","geoGraticule","theme","useTheme","getBorderWidth","getBorderColor","useInheritedColor","getFillColor","useChoropleth","_ref2","features","data","match","label","value","valueFormat","colors","unknownColor","domain","findMatchingDatum","isFunction","feature","datum","featureKey","get","datumKey","getLabel","getValue","valueFormatter","undefined","d","format","colorScale","guessQuantizeColorScale","boundFeatures","map","find","datumValue","featureWithData","_extends","formattedValue","color","legendData","useQuantizeColorScaleLegendData","ChoroplethTooltip","memo","_jsx","BasicTooltip","id","enableChip","propTypes","PropTypes","object","isRequired","displayName","commonPropTypes","arrayOf","shape","string","type","oneOf","properties","geometry","Object","keys","number","oneOfType","func","inheritedColorPropType","enableGraticule","bool","graticuleLineWidth","graticuleLineColor","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","any","layers","GeoMapPropTypes","role","GeoMapCanvasPropTypes","pixelRatio","commonChoroplethPropTypes","quantizeColorScalePropType","ChoroplethPropTypes","ChoroplethCanvasPropTypes","commonDefaultProps","legends","fill","defs","GeoMapDefaultProps","GeoMapCanvasDefaultProps","window","devicePixelRatio","commonChoroplethDefaultProps","ChoroplethDefaultProps","ChoroplethCanvasDefaultProps","GeoGraticule","lineWidth","lineColor","strokeWidth","stroke","GeoMapFeature","_feature$fill","strokeLinejoin","event","GeoMap","props","partialMargin","margin","_props$layers","_props$projectionType","_props$projectionScal","_props$projectionTran","_props$projectionRota","_props$fillColor","_props$borderWidth","_props$borderColor","_props$enableGraticul","_props$graticuleLineW","_props$graticuleLineC","_props$isInteractive","_props$onClick","Tooltip","_props$role","_useDimensions","useDimensions","outerWidth","outerHeight","_useGeoMap","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","useCallback","handleMouseEnter","handleMouseMove","handleMouseLeave","SvgWrapper","children","layer","i","Fragment","withContainer","ResponsiveGeoMap","ResponsiveWrapper","getFeatureFromMouseEvent","el","_getRelativeCursor","getRelativeCursor","x","y","f","geoContains","invert","GeoMapCanvas","_props$pixelRatio","_props$onMouseMove","canvasEl","useRef","useEffect","current","ctx","getContext","fillStyle","background","fillRect","left","top","context","forEach","strokeStyle","beginPath","ref","style","cursor","displatName","ResponsiveGeoMapCanvas","Choropleth","_props$match","_props$label","_props$value","_props$colors","_props$unknownColor","_props$legends","_props$tooltip","_props$defs","_props$fill","_useChoropleth","boundDefs","bindDefs","dataKey","targetKey","legend","BoxLegendSvg","containerWidth","containerHeight","ResponsiveChoropleth","ChoroplethCanvas","renderLegendToCanvas","ResponsiveChoroplethCanvas"],"mappings":"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"}